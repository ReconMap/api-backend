<?php declare(strict_types=1);

namespace Reconmap\Repositories;

use Ponup\SqlBuilders\SelectQueryBuilder;
use Reconmap\Models\VulnerabilityCategory;
use Reconmap\Repositories\SearchCriterias\VulnerabilityCategoryCriteria;

class VulnerabilityCategoryRepository extends MysqlRepository implements Deletable
{
    private const TABLE_NAME = 'vulnerability_category';

    public const UPDATABLE_COLUMNS_TYPES = [
        'parent_id' => 'i',
        'name' => 's',
        'description' => 's'
    ];

    public function findAllWithoutChildren(): array
    {
        $searchCriteria = new VulnerabilityCategoryCriteria();
        $searchCriteria->excludeChildsCriterion();
        return $this->search($searchCriteria);
    }

    public function insert(VulnerabilityCategory $category): int
    {
        $stmt = $this->db->prepare('INSERT INTO vulnerability_category (parent_id, name, description) VALUES (?, ?, ?)');
        $stmt->bind_param('iss', $category->parent_id, $category->name, $category->description);
        return $this->executeInsertStatement($stmt);
    }

    public function updateById(int $id, array $newColumnValues): bool
    {
        return $this->updateByTableId(self::TABLE_NAME, $id, $newColumnValues);
    }

    public function deleteById(int $id): bool
    {
        return $this->deleteByTableId(self::TABLE_NAME, $id);
    }
    
    public function search(VulnerabilityCategoryCriteria $searchCriteria, ?PaginationRequestHandler $paginator = null, ?string $orderBy = 'name ASC'): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        return $this->searchAll($queryBuilder, $searchCriteria, $paginator, $orderBy);
    }

    protected function getBaseSelectQueryBuilder(): SelectQueryBuilder
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability_category');
        $queryBuilder->setColumns('id, name, description, parent_id');
        return $queryBuilder;
    }

    public function findAllChildren(int $parentId): array
    {
        $searchCriteria = new VulnerabilityCategoryCriteria();
        $searchCriteria->addParentIdCriterion($parentId);
        return $this->search($searchCriteria);
    }

    public function findAll(): array
    {
        $searchCriteria = new VulnerabilityCategoryCriteria();
        return $this->search($searchCriteria);
    }
}
