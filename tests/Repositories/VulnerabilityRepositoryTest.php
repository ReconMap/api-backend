<?php declare(strict_types=1);

namespace Reconmap\Repositories;

use Reconmap\DatabaseTestCase;
use Reconmap\Models\Vulnerability;
use Reconmap\Repositories\SearchCriterias\VulnerabilitySearchCriteria;

class VulnerabilityRepositoryTest extends DatabaseTestCase
{
    private VulnerabilityRepository $subject;

    public function setUp(): void
    {
        $db = $this->getDatabaseConnection();
        $this->subject = new VulnerabilityRepository($db);
    }

    public function testSearchForAll()
    {
        $searchCriteria = new VulnerabilitySearchCriteria();
        $vulnerabilities = $this->subject->search($searchCriteria);
        $this->assertCount(100, $vulnerabilities);

        $vulnerability = $vulnerabilities[0];
        $this->assertArrayHasKey('category_name', $vulnerability);
        $this->assertArrayHasKey('cvss_score', $vulnerability);
        $this->assertArrayHasKey('cvss_vector', $vulnerability);
    }

    public function testSearchCount()
    {
        $searchCriteria = new VulnerabilitySearchCriteria();
        $vulnerabilitiesCount = $this->subject->count($searchCriteria);
        $this->assertEquals(100, $vulnerabilitiesCount);
    }

    public function testFindByIdReturnsProjectInfo()
    {
        $vulnerability = $this->subject->findById(10);
        $this->assertEquals('Linux host template', $vulnerability['project_name']);
    }

    public function testUnsuccessfulDelete()
    {
        $this->assertFalse($this->subject->deleteById(-4));
    }

    public function testFindByProjectId()
    {
        $vulnerabilities = $this->subject->findByProjectId(2);
        $this->assertNotEmpty($vulnerabilities[0]['summary']);
    }

    public function testUpdate()
    {
        $vulnerability = $this->subject->findById(38);
        $this->assertEquals('Test vulnerability #37', $vulnerability['summary']);

        $this->subject->updateById(38, ['summary' => 'A much better summary for #38']);

        $vulnerability = $this->subject->findById(38);
        $this->assertEquals('A much better summary for #38', $vulnerability['summary']);
    }

    public function testInsert()
    {
        $vulnerability = new Vulnerability();
        $vulnerability->summary = 'Security hole';
        $vulnerability->description = 'A security hole in your system';
        $vulnerability->risk = 'high';
        $vulnerability->project_id = 1;
        $vulnerability->creator_uid = 1;

        $this->assertIsInt($this->subject->insert($vulnerability));
    }

    public function testClone()
    {
        $this->assertIsInt($this->subject->clone(1, 1));
    }
}
